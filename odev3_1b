p = int(input("Enter the p value : "))
q = int(input("Enter the q value :  "))
n = p*q
print("*****************************************************")

def prime_status(a):
    if (a == 2):
        return True
    elif ((a < 2) or ((a % 2) == 0)):
        return False
    elif (a > 2):
        for i in range(2, a):
            if not (a % i):
                return False
    return True

p_status = prime_status(p)
q_status = prime_status(q)
while (((p_status == False) or (q_status == False))):
    p = int(input("Enter the p value : "))
    q = int(input("Enter the q value :  "))
    p_status = prime_status(p)
    q_status= prime_status(q)


e = 31
print("[n] : {}".format(n))
print("[e] : {}".format(e))
r = (p - 1) * (q - 1)
print("totient n (r):", r)
print("*****************************************************")

def egcd(e, r):
    while (r != 0):
        e, r = r, e % r
    return e
def eugcd(e, r):
    for i in range(1, r):
        while (e != 0):
            a, b = r // e, r % e
            if (b != 0):
                print("%d = %d*(%d) + %d" % (r, a, e, b))
            r = e
            e = b
def eea(a, b):
    if (a % b == 0):
        return (b, 0, 1)
    else:
        gcd, s, t = eea(b, a % b)
        s = s - ((a // b) * t)
        print("%d = %d*(%d) + (%d)*(%d)" % (gcd, a, t, s, b))
        return (gcd, t, s)
def multInv(e, r):
    gcd, s, _ = eea(e, r)
    if (gcd != 1):
        return None
    else:
        if (s < 0):
            print("s=%d. %d <0 => s = s(modr); s=%d." % (s, s, s % r))
        elif (s > 0):
            print("s=%d." % (s))
        return s % r

print("Euclidean Algorithm:")
eugcd(e, r)
print("\n################\n")
print("Extended Euclidean Algorithm:")
d = multInv(e, r)
print("[d] : {}".format(d))
print("\n################\n")
public = (e,n)
private = (d,n)
print("Private Key : {}".format(private))
print("Public Key :", public)
print("\n################\n")
